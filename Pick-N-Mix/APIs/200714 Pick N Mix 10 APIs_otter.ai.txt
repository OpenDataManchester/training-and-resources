Reka Solymosi  0:01  
Hey, thanks very much. And so for my presentation talk, workshop, pick and mix session. Today I'll be going through a document to which I have just pasted the link into the chat. And so hopefully everyone should have that link now. And so if you wanted to follow along, and I will be sharing my screen so you'll see it there. But also if you wanted on your laptop or on a tablet or phone to also have the notes available, then you can use that link to access everything that I will be talking about. And Alright, so I will share my screen. And there it is. So I'll be talking to you today about accessing open data through API's. I'll start with just introducing myself. And I'll ask some questions samsa to keep interaction to specific time, so I, I think most of the time, stay on mute. But when I asked questions, do unmute yourselves and the and talk or write something in the chat if you're not comfortable talking on the zoom. And so quick introduction, then I'll talk about what are API's with some examples, and very quickly why you would use them. And then I'll go through three different ways that we can get open data, or we can call data API's. And we'll look at direct calls and then we'll look at using wrappers and both the sort of graphical user interface wrapper and code wrapper and I'll talk about what those are and how they're different as well. And then hopefully, we should have some time for questions and discussions. I have now set my stopwatch so hopefully I will stay on Time. And if you have questions as they come up, just put them in the chat and then we'll pause throughout the session to talk to your questions as well. Okay, so quick introduction, who am I? I've got a little website there to kind of collate everything that I do. This is me. I'm a lecturer in quantitative methods at the University of Manchester. And I'm also a member of software Sustainability Institute. And I think I still have my post as honorary lecturer at UCL. And that's where I did my PhD. And I try and no, hang on, you don't don't like leaving. And, and most of my research is around using sort of new forms of data, and to understand people's behaviours and perceptions and attitudes, usually in relation to crime, transport, policing, that sort of topic. And so I've got here little links if people are interested in what I do. outside of here, for example, about my research. And so for example, my PhD at UCL, I looked at different ways of measuring where people feel safe and unsafe. And I built a mobile app where people could tell me if they felt safe or not safe in a particular place in time. And then I started, I went on to build on that using different types of sensing physiological sensing measures. So galvanic skin response, heart rate, all that kind of exciting thing. Um, and maybe more relevant to today. I recently was working on a project looking at appeal for information about missing persons. And specifically I was looking at post about it, but I was looking at when Greater Manchester Police send up tweets for appeals for information, what are the elements of that tweets that might be associated with more public engage With people interacting with these, so here's some resources. Here's the paper, and the code that I used and some data on GitHub, which if you watched last week's session, or the week before, last, the GitHub session of pick and mix, em should be familiar. And so it can read about that sort of thing. And I also do teaching, sometimes I blog, mostly things like tutorials, or sometimes about, you know, books I've read, or my paper, which would just, I just clicked on that and, and have my talks started collecting talks on here as well. And so if you forgot or lose the link for today, but you remember Rica and the word data, you can maybe guess why I didn't use my surname on on this, and then you'll be able to find the link to this page. So Here it is open data Manchester Pick N Mix session. Oh, that's me. And I think yeah, maybe I'll leave this this interactive. But for later I was going to ask. But there's no yeah voting. I was going to ask what people's familiarity with API's was, is anyone who used the fundraising function, right? Actually, we can use the yes or no on the participant function. Sam, can you see my participants tab? Or does zoom that actually share zoom parts of my screen? It doesn't actually show zoom parts of your screen unfortunately. Well, if you see on your zoom, taskbar, there should be a tab that says participant. And at the bottom, there's a couple of buttons one says yes, one says no, go slower, go faster, and so on and so on. If people could if they're super comfortable with API's and like this is their jam, take Yes, the green button. And if they're new to this and just curious and want to see what's happening, click on the no button and then maybe we can have a view of what people's experiences. Okay? Yeah, Peters very familiar, I might be asking for some tips there. Okay, so we've got like a pretty decent mix with we've got 123 people who were brave and take the the green tick sign, and it can't help but notice that Sam, not open data set it. Sam likes to stick the red X and we recently wrote the material for this for book chapter together. So I do hope that you didn't mean that and but those of you that take the green checkmark, I might be calling on you later for some help. So thank you for your, your bravery and stepping forward. All right. So for everyone else who used the no button, I'll go through what API's are and some examples. So API, the stands for application programming interface. And essentially what it is, is a tool for you to be able to interact with software. That's, I guess, the most basic, high level definition, but it specifies what kind of requests you can make, and how to make these requests and also what kind of results will be returned based on those requests. And specifically in this talk, what I'll be talking about is what When an API is created by an open data provider, or a provider of data that to some extent might be open. And that might give us access to a subset of their content or their content wherever they provide openly. And and these API's, they basically allow you to query content in a scripted and programmatic way. And the reason that that's important, as all, you know, open data people, we know that one of the key tenants of having open data is that it should be accessible in machine readable, right? So we should be able to acquire these data in a way that is programmatic an API to facilitate this. So these can take many API's can take many different forms. And I like this paraphrase. I'm paraphrasing the source here but they can be varying in quality and usefulness and We will be talking about some useful ones. But essentially what we're talking about here are these RESTful APIs. And rest stands for representational state transfer. And because what we're doing is we're trying to access open data through these API's through the web. And these API's, they work directly over the web. And basically what happens and they borrowed this fantastic drawing is specifically tweeted the author for permission, cuz it's great. But what you have is you have your client, and which sends this request to a server. And then the server then sends a response to that request back to the client. And in this case, this is us, this client is us. And the server is the open data, I guess repository that we are querying. So this this dance that we see Here is the request response cycle. And yeah, these Yeah, these web based API's are nice because we can start playing with them to understand how these work and how we can query data from databases. So yes, this this image is fantastic. I borrowed it from this blog post, which I recommend people checking out they have some cool examples of of API's and talk through in some more detail, I should say, My background is not at all in computer science. My experience is very much I need data. Data is provided through API's. How can I get that data that's a that's the perspective from which I am coming from. So some some examples. And possibly one of the more famous ones is the Twitter API. So Twitter release some percentage of their tweets for free through the Twitter feed. ppi. And if you look at their documentation, I have this link right here under details. And it gives you some description of the types of requests that you can make. So with Twitter, you do need to make a Twitter developer account and it's become more strict over the years. I think it takes a while to get approved. Now, but when you do, you can use this account to do all sorts of neat things. And the paper I mentioned earlier, where we were looking at the tweets of missing persons. And what we did is we got the timelines of users and he's trying to find tweets. So here's his timeline so you can get a user timeline. So we got the timelines of Greater Manchester Police. a Twitter account was littered.com So we would basically get all of these tweets and get all sorts of information. So we would know if it's a retweet or not. And the text of the tweet, the time, if there was an image, the URL to the image, the number of comments, retweets, likes all the sort of information we can get from using Twitter API. And then you can do cool stuff, like look at what is being shared, and what is not being shared when it comes to missing persons. Um, there's also so Twitter kind of curate their own favourite projects as well. This is some favourite student projects that they've been collecting. So somebody use the Twitter API to map road closures caused by natural disasters. And some students, I assume at Harvard, I have created a tree that tweets at Harvard. So what I'm talking about today is acquiring data. So getting and collecting data using API's, but you can also use these to do all sorts of things. So for example, with the Twitter API, you can create a tweet bot, for example. So you can push your content as well. And so on. There's a quite like this example. It's a, it used to be a shiny app, but is now an R package that basically decides based on your Twitter timeline, whether it thinks you're a bot or not. So here is the kind of description and how to use it. But they have the example they put through Donald Trump's account and then Netflix bought and then some real people, and it predicts what probability it thinks something is a bot or not. So actually, Donald Trump is not but Netflix bought has something like 97% chance that it's a bot. These are some cool things you can do with Twitter API, other social media. Also release data through API's. So for example, Instagram, again, tops. And yeah, so with Instagram, you can also look at to look into click on details. And they're sort of developer documentation and it tells you some important information. And we'll go through how to look at API documentation in a bit. And you can do cool stuff with that. So I enjoyed this paper, which found that Instagram photos reveal predictive markers of depression. And specifically, they looked at different filters. And they found that using different types of Instagram filters are a predictor of, of depression and there it is. So, were depressed participants when they employed filters. They use inkwell filter, which converts colour photographs to black and white images. Whereas healthy participants, they like the Valencia filter. So if now you want to go back and look at your Instagram account and see what filters you're using, you might see if you have more in common with somebody who is depressed for more. So this is quite an interesting use of the Instagram API. And but it's not just social media. So there's the police dot UK site, which releases open data about crime policing, so things like stop and search in England and Wales. And so here's the documentation for that. And we can read what types of information we can get, for example, here they're stopping stuff search by force. And so it tells us we can get in Information about the stop and search by force. And so here we is a bit of a sneak preview. Here's an example of requests and an example of response. And but we'll go through how to construct these and what this means. And but this is a non social media way of getting data. Source. Yes. And there's there's loads. I mean, I yeah, there's a NASA has API's, you can retrieve a picture from the Mars Rover, Spotify, if you're interested in, I think, yeah, the types of music that you listen to or you want a recommendation or something like that. And, and then there's also citymapper, which I don't know if people are familiar with, but it's a route planner, which makes use of lots of transport related API's, which is interesting for us, because we'll be using Transport for London API in a bit. I did Go with TF tm API's because I think you need to sign up and it was a bit more complicated tutorial. So we're gonna have to take a trip down to London but here you can see there's Manchester and you can get sort of live updates you can use it for routing and, and so on. So these use they pull data from API's as well. Okay, so why would we use API's or some data there are only made accessible through API calls. For example, Twitter and Instagram data as far as I know you can only query that through API's but other data so police that UK data for example, you can also get from just downloading so if we go to just data dot police, UK. We can instead of clicking on the API tab, click on Data downloads and download a comma separated value CSV file. So okay, in that case, why would we want to use an API? Well, the nice thing about using API's is that you can get fresh data automatically. So if you download a CSV from a website, that's it, if you've saved it locally, and it's, that's what you have, it doesn't refresh, whereas with an API, you can keep querying the database live and so you can get refresh data. And the other nice thing about API's is that you can write queries in nearly any sort of general programming language. So it doesn't have to be one specific thing that you specialise in, it could be Python, or Java, JavaScript, Ruby, etc, etc. Lots of lots of options. And so these are some nice reasons. Why would you use an API? So I said, we will go through three different ways that we can get data with API's. And these were the direct calls. And then to using wrappers, one with graphical user interface and one with code within our package. So let's start with direct calls. Because I think that's the nicest way to look at these web API's and start thinking about how queries are structured. So how basically what we're going to what these three things do is show different methods of creating this request from ourselves to the server. And they all get the same response back. But there's three different ways that we can make this request. So we'll be using the example of the Transport for London API. So they Quite a lot of open data, actually, that is released by Transport for London. So click on this link. And it tells you a little bit about the unified API. So the idea is that they wanted to standardise the way that you can query all the different types of open data, that TfL release. And so you can read about that here. It tells you all sorts of exciting things. And about why it's important and so on. But what so also what are the available data sets, so journey planning, status, disruption, arrival departure, timetables, embarkation points, routes, and lines and fares. All of these are quite useful if you're creating a journey planner like city mapper, for example. So what we want to do is you want to access this unified API. So click on this link. It takes us to this page. So the one of the reasons I mentioned that, for example, for Twitter, you need to sign up for an account. And for the TfL API you can do, and if you're creating sort of lots of calls and so on, but you can actually create calls without, without an account. So we can just demonstrate doing that in a browser, which we will try. So, here's lots of different types of data that we can query we can look for accidents, statistics, for example, we can look for air quality. The bike points for the Santander cycle, share, thing, journey, blah, blah, blah, blah, blah, lots of things. And, specifically for this example, we're going to focus on stop points and stop points in this zoom. The stop points in this case are the The stop points and or stops along a specific route. So I've clicked on that and it has given me this description. So this stop point thing gets a list of stop points corresponding to stop IDs. And so here it gives us sort of these different. I guess indicators of what we will need to build up our query. And if we wanted something else there, we can just so for example, if we wanted the bike points, and we can just click on that here, we didn't have to finalise that decision on the previous screen. And we let's say we wanted to search for bike stations by their name, and it tells us okay, what we want is bike points slash search query. It takes a while of reading. So the reason that for example here with all the examples Always lead with the kind of details. Before the examples for each specific API is it takes a while to look through the documentation and understand how queries need to be structured. And it also might take a while to understand what you're looking for. So for example, let's see, I know I didn't know much about this, I might say, Oh, actually, I'm looking for line. I don't know, all lines, and they're valid routes for given modes. And the terminating stops. I'm not I used to work at TfL. And I'm not 100% sure I understand what the differences between this data set and something that is very, very similar, right, it's sequence of steps on each route, right. So it takes a while of going through all of these and understanding what data it is that we're after. But I wanted to pick stop points because I think it's a nice Nice, illustrative one. And then we can go from there. So, there's so many though. Yeah, it's nice and easy. Stop 80s in the line for lines. Stop points. So the reason one of the other reasons why this is giving me some grief is because if you look at I did include this sort of documentation tab for this, and I get this fantastic response. It says looking for our API portal, we're making some changes. And so sometimes very unhelpfully. What happens is the TfL have created this fantastic unified API and then decided that always the way that people have been using it has been too smooth. Let's Let's Chain make it better innovate some. And so what I'm looking for is point some did it is not from my days but from lying. Not crowding, although we could look at crowding as well. It is fruit very good. So what I'm interested in is the root sections for all the lines blah, blah, blah given stuff blah, blah, blah. And if we for simplicity, look back at the, what was there a nice and friendly example We can see that the query is structured in this way. So we have the URL for making the query to TfL, which is API dot TfL. Duck off that UK. And, and then we have line, Baker loop and stop points. So what this looked like, in the sort of original helper function is it just had here instead of Bakerloo. It says Id like that. So if we wanted to query the line, stop points across the Bakerloo line, for example, then we have this line, and then we want the stop point. So in the ID, what we need to do is we need to put the ID of the specific routes that we want to query. So let's say that is the Bakerloo line. And if we enter this into your browser, we can see we get this result back. So this definitely looks like a result. It's not something that's readable to my eyes as a human, but it is machine readable, and which is nice. So it's something called a JSON object. And JSON stands for JavaScript Object Notation. And it's just a standard. An open way of storing data, like, like a comma separated value is another standard way of storing data. And it's easy for your machine to parse this sort of thing. So but yeah, basically when we're making this kind of URL based call to our document to our server. So here, this request What we need to do is find out how to structure this call. And then how to change the specifications that we require. So I did this kind of sneak preview with the stop and search data from the data dot police that UK where they have this example request. And so here you can see also a URL, right? So like we had, what was it api.tfl.gov.uk here, here we have data.police.uk forward slash API forward slash stops force and the stops for so this is stop and search by force is the same kind of thing that here line is telling us right so we're looking for that specific type of data in there. And then here we have force equals even in Somerset and date equals the first of January 2017. So now, if I paste this into another tab, right, so this Just in a browser. So here I'm in Chrome. And I know because I've tried this before that it won't work because 2017 is apparently a bit out of date. But if we change the date to 2019, so here we still have dated police that UK API stops force, we still have even in Somerset. But now we have the first of January 2019. That again, returns this funky bit of data that is the JSON object. Like we had our lines. So this is how we make a query. We kind of look at the documentation, we pick it apart, and we see what we want to change. So for example, if we wanted to change the force from a Vin in Somerset to Merseyside. Boom, you can see it updates and we have the data from Merseyside and let's say we wanted March instead of January. We can change from one 203, it doesn't like that. Maybe I have made too many requests now. All right. Don't ask for March. Clearly. Try April. Thank you about April. Okay. Maybe there's a lot of stuff in search in April. Better weather, more people outside. So I have still loading. Yes, floated. Good. Now we have stopped and searches for April. Still looks like there were quite a lot in recent. So and what we've been doing here is we're beautiful stolen picture, creating this request in these URLs looking through the documentation and making a change. So I have a minute take the first sort of quick break here. And and and answer any questions that people might have at this point, I might ask Sam to read those things from the chat if they have been being asked. Otherwise, if you have a question now just speak up before we move on. And in the meantime for people who want to challenge themselves, and I have an exercise for you. Let's say that instead of the Bakerloo line, we want data for the Northern line, what would the URL look like? So here as a reminder, I have the URL for the Bakerloo line, what would be different for getting stuck points for the Northern line? All right, and if there's no questions, anyone got the answer to how the URL would look? There's some  text. 

Sam  32:02  
I mean, I can give it a go. If no one I Here we go. Angeliki has put in the chat box. 

Reka Solymosi  32:08  
Let's look at the chit chat. All right. All right, we've got a couple. And in fact, we have three and they all look the same. So that's always a good sign. Let's copy of copied from the chat box and we have paste. Yeah, there it is very good. So you replaced Bakerloo with northern, and we've got our stop points. So this has been, you know, useful in that we now know how to create this request. But what do we do with it? Right, so we've got this pasted text And in our browser, how can we then turn that into something useful. So here I'm using R now you can use, you know, any data strategy that you that you're comfortable with, you could do this in Python, or MATLAB, or whatever. And but I'm most comfortable in our so that's what I've been using. And so feel free to follow along in our if you want to otherwise, and can do that later, or in your preferred programme of choice as well. And specifically I'm using because we're, the data gets returned to us in this JSON format. I'm using the from Jason function in the Jason lite library. And, and I'm also using the read lines function from base r in order to get what is all of this into my art environment. So I'll just copy this over. To this session, let's look at this library, JSON light. And then now I'm creating this API call object using the from Jason and read lines function. And here, this is the same URL that our three participants have posted in the chat, and which is the TfL API line, Northern stuck points. And I do get this warning about my incomplete final line. Which basically just means that there's some end of item character missing when I read this in, and it's a warning so are my code still executes. But I it does mean I should have a look at the results. So I should make sure that everything that I'm expecting to appear in this API call actually appears. And if I look over here in my environment, I can see that actually Okay, I have 50 observations. And they know that they're 50 stops on Northern Lights. So I am okay. So if I wanted to view this, click on this API call result. Basically what I get because this from Jason function parses the data to the best of its abilities is what resembles a data frame, right? So we've got two variables as columns and our observations as rows, each one stop as one row. And we have all sorts of things like does it serve bus to go to Bologna, both ba and, and then I should somewhere have a name there it is common name archway, underground station, Angel underground station data. But then I've also got these variables that are data frames. So Jason is kind of this nested format. So for example, if I look at lines,

Reka Solymosi  35:56  
and I can see that oh, this is a data frame with it. In a data frame, so now I can see that archway serves all of these bus routes as well. So once even once you've got the data into your environment, you've got to play around with it a little bit to see what you're specifically after and how you can extract that into a format, that you can then perform the analysis or visualisation that you want to do so. So it is a lot of playing around with the data that comes out of the API. So that's basically what I see here. Um, and then I like, like this point from the salmon eyes Chapter The, this demonstrates an important challenge faced by researchers when using open data. It's messy and complicated, and, but it's open. That's very nice. It's not always neatly formatted data frame like you would expect this CSV file. However, if you carry out some data wrangling you can extract the elements that you need and make it do the cool things that you want. So for example, I'm not going to go through this code because this session is not about data visualisation in R. And but what I'm doing here is I'm using these libraries for data wrangling for spatial data, and for plotting in R, and then I'm selecting the coordinates turning, or the stations, the names of the stations and the coordinates, turning that into a spatial object. And then I can make this nice plot of my points are the data that I got back. And that creates this nice, all of the stations along the northern line. And so that's what we can see here as well. So now we know that our query worked, it returns this information and now we can plot the northern money for example, by connecting it up. So that was using the URLs are here you can see again how this was structured. So that's version one. Now there's I mentioned about rappers, which is a different way of accessing API's. And these are basically just created to make it easier for people to access this. Or you can specify different parameters as well. So make multiple queries, for example. It's called a wrapper, because it wraps around your the API to make it neater and more usable, that sort of thing. So here, we'll look at two types of rappers, one graphical user interface based on one code base, and both of them are for the API for OpenStreetMap. So if you're picking mix, regular, you might have seen a Sam's presentation about OpenStreetMap and about how to contribute so I won't going too much into what OpenStreetMap is, you can watch his session about that. Instead, I'll talk about something called overpass turbo. So overpass turbo is just close all these tabs is a graphical user interface or GUI based way of querying the OpenStreetMap API. And I will open also there's this OpenStreetMap documentation for the API, because as I said, it takes time to pick your way through the way that queries are structured and so on. And so you might want to read through this, if you're getting serious about getting extracting data from OpenStreetMap. It also returns our data in JSON format. So you've seen that, but overpass turbo it looks like this. So it shouldn't look like this for you yet. So create a new session overpass turbo Well, it's remembered my settings how terrible that's paying to Firefox. And there go fleet you remember nothing? Yes, you remember nothing. Okay. So this is what it should look like for yourself. And on the right hand side here you have a map and on the left hand side here you have the query, and it populates this with an example query, which says, Ask for node. And if you watch Sam's session on what are the elements of OpenStreetMap, you know, nodes or points and it's saying I want so it gives you what is known as a key and value pair. So the key here is immunity. So I'm looking for all the immunities that are drinking water. And and it also sets this V box so the box stands for bounding box and the Just tells the So it puts into the query what area you want to get all the drinking water immunities from when it looks like this with a squirt of squiggle, squiggle books squiggle, squiggle. That means it uses these this border here of what you can see in this map view as your bounding box so it will return everything that's drinking water within this box. So we can click on run here to run this query. So it says processing and then all of a sudden we see all of these points appear which are all of the facilities for drinking water in Rome near the Colosseum, right so you can click on that one and it's no number we got one tag me drinking water and credits coordinates. So okay, that's that's, that's nice. And we now know where drinking water is in Rome. But how do we change this right? What are what are some ways to get actually what we're after. And that's where you would go through the documentation and have a look at what are the key words, what are the keys and values that we're after. So, for example, so here I just this is the example we have. And you can read through this if you'd like. But for example, let's say you wanted to change the bounding box, instead of having this outline. So you can see, let me just illustrate this. Actually, if I zoom out, you can see it's used. It's only returned the drinking water facilities within this book. If I now I've zoomed out so that bounding box here has changed. If I run this query again, you can see Oh, now it's returned all of the drinking water in this area and I zoom out a little bit more. You get the idea. We're changing our boundaries. But what if we want to specify not with this? Well, you can set your bounding box with coordinates and this is the order you want yourself with. west, north and Eastern points. And you can use this website I just googled how to find bounding box and came up with this website. And there might be other smarter ways, but you can zoom in to some area and then create a bounding box around it. Here's the sort of information that you need. So I use this to find the coordinates for Manchester. And then you can change the query to have instead of this B box and have the coordinates for Manchester, so let's change that. Hey, if we run now, then hopefully, we should see there's no actual data and run but if we do, oh, we should hopefully have drinking water immunities in Manchester. This is the most we can do for travel. Oh, we've got it in a big line. Okay. Well, clearly I messed up something with the coordinates but at least we have them somewhere else. Okay. There it is drinking water at Manchester City see there's that little water fountain in the Piccadilly station operate by network real right. Um, so let's go back to using well yeah The other thing I wanted to show is okay, let's go back to the bounding box being from the map we can also search so let's say just search Manchester and then there's all the United States Manchester is Greater Manchester. It will zoom to Manchester that way to refuse this little search bar and then if we use this bounding boxit will return the data within that. So it's a appears. Here's just a screenshot of what I just showed us. So I'm time for the second exercise. Now that pubs are open again, why would we want to be drinking water? And who knows how we should change the query in order for it to show us all the pubs in Manchester hear the cogs whirring No

Sam  46:18  
We have a we have one in the chat, but it's from Sam Langton and I thought that would be cheating. I feel like he would know already. 

Reka Solymosi  46:28  
No, no, we've got we've got Davin - ammenity equals pub and ammenity drinking beer. I like drinking beer. Very good. It is, in fact. I mean at the other pumps that both were in the chat, let's try pub first. Oh yes. Look at all those pubs that are reopening. I believe Mostly, make sure you wear your peepee when ordering your pints, and yeah, so for example, there we have the Queen's arms. Here's a coordinate. So on. Where's pilcrow? Somewhere here, right? Oh, all right. Very good. So, back to here, the chat. And yes, so if we wanted pubs, we change immediately to pubs. Okay, so does that mean that if we wanted the stations in London, do we just change it to station? Well, okay, first let's navigate to London. Remember, we can just use our handy search bar instead of having to find our bounding boxes. Here's London. So if we say immunity equals station run, we actually get an empty result. And you can see that it says here this map is intentionally left blank, because there's no actual data for immunity equals pub. And that's because you know, we're talking about the key and value pairs, there's no key and value pair that lineup to immunity and station. And instead, what we would do is go back into our open OpenStreetMap wiki and have a browse on what are the features, what is there and so on. And we could find the appropriate key and value pair that will return to us stations. So we could do that that sounds very labour intensive. Instead, we could also make use of the query wizard. So the wizard is here to help us it's a query builder. So what we can do is open up this wizard in the search bar, just type station and what it's going to say. So I can say build, query, build and run or cancel. Let's do build query. And here on this side, it's both me And what is different we can see is that it says instead of immunity, it says public transport equals station. So that is the key and value pair to get stations. And you can see also besides node i got way in relation. So if you go back to Sam's OpenStreetMap talk, these are the different types of elements in OpenStreetMap. So let's get rid of way in relation because you don't care. Let's only care about nodes. And when we run this, we now see, we get all of the stations across London. And now if we wanted to save this, we simply click on Save. And oh, no, just kidding. That saves a query, we click on Export. And so that we can download a geo JSON file. So again, we've got this JSON format, geo Jason just means it has geographic reference. And so coordinates which allows us to map it so we could save this download, save it in our downloads and see File not going to do no because and once we saved it, we can then load it into whatever GIS we're using to map. So that is using overpass turbo. And then the last one, which I'm just going to quickly go through this again, I did it all in our and this isn't an art tutorial. And but the last way to use a wrapper or to get a that I'm going to talk about using a wrapper to get data from the API is using an R package. So this is just a bunch of code that somebody has written that helps you query this API. So it exists for not just OpenStreetMap, but lots of other things. So for example, if you wanted Twitter data, you could use the our tweet package. for Instagram API, there's the Insta loader pack, Python module. So there's these are bits of code that somebody's written, that just makes it easier for us to access the data with the data. So specifically for OpenStreetMap, I'm using this OSM data package. And in this case, so he would still, I would still encourage you to look at the OpenStreetMap API documentation, which we have up here earlier, so that we know the key value pairs. We know all of the things that the ways that we would structure our queries, but to help you through it, and to help you focus. There's usually some sort of documentation with the package or the wrapper itself. So in the case of an R package, we have vignettes. And so this here is opens the vignette for this OSM data package. It talks through introduction, how to load how to instal what the different parameters are, and so on. So it just makes it a little bit more accessible. There's more examples and more support really. So um, you still have to follow very similar steps as overpass turbo Right, because we're creating this overpass query. So you will need a bounding box. And you will need to make the query but there's functions that help you do that. So for example, to get a bounding box, we have this get and BB function, which lives in this OSM data package. And this Gatsby function will get us a bounding box. And by I mean, you know, we can still do this manually with that box finder calm if we want or we can make use of a search functionality within this function. And we can just say, I want Greater London United Kingdom as my bounding box. And so that's what we do here. Copy this over into our session. And so we load it to the package OSM data. And then we use this gets BB functions To get our bounding books and we just say place name is Greater London United Kingdom. And this format out it just specifies that we want the simple features polygon again, this isn't a tutorial on GIS and our so I won't go into detail about what that means it just means I'm going to be able to map it now. And using the visualisation and simple features packages, the GG plot in SF, I can plot to this bounding box and hopefully we will see I should show you this here. The result is this London shaped bounding box. But apparently that's not quite what I thought it was because it just takes the South East north and west points just like we did with the overpass turbo the four points to sort of create that actual box, but then later we can use this lemon shaped box box to substance Only the stops that are in London. So this is how we create with this this line here we've created our bounding box, just like we did with overpass turbo with our sort of zooming and doing doing this finding our location and zooming option and then to structure the query instead of using that wizard. And what we do is we use this op Q function, which stands for overpass query and in that is where we specify our parameters for example, our key value pair which we know now the key is public transport and the value is station. So, what we do then is we create our query by using this O P Q function pass the bounding box right that we created earlier. Then we add the feature that we want add OpenStreetMap feature Where the key is public transport and the value of the station. And we say again that we want this returned as a simple features object so so that we can map it. And then this last one, the trim OSM data is where we can actually use London outline rather than the box to get the data that's within London and not London plus some corners. So if we then run this, so these are all functions that live in that wrapper in that Open Street Map was m data package. So all of these functions have been created in that package, so that we can call the OSM data from here. Okay, so I'm getting some fun errors, which usually have to do with my internet connection and either having the VPN Honour off. And but hopefully if you're doing this, you're not getting these and instead we will have this OSM stat SF object. Do I have it yet? Nope. Still trying that. I'll check back later. And but once you have that, you can just print it to the console, and it will tell you what it is. So it prints out the bounding box that we use the call, you can get the call that we submitted. And then we get our points, lines and polygons. And we can subset that to only use the points for example, which is what we did with when we were building our overpass query. Remember we got rid of things that were not nodes. So here we just select what our points and it's not working for me with my dodgy internet. So I apologise for that. But if it did work, then we could see what are the different parameters. So we know that from open from the OpenStreetMap talk that people can log different features of the notes that they provide to OpenStreetMap. So for example, we can see if it's northern Lake, district line reports, and so on. So we can filter to choose only the stations on the Northern line. And then finally, we could plot the OpenStreetMap points, and then compare them with the TfL points that we got earlier. So if you see this map here, with TFO points in red, and the OpenStreetMap points in blue, you might notice something different. So my very last exercise is why do you think that these two maps are not the same? And also, if you have any questions, I can answer those now.

Sam  58:08  
Reka, sorry, which two maps were you referring to? I missed that bit. 

Reka Solymosi  58:13  
So on this plot here, I have in blue, the points from OpenStreetMap. And then in red, the points from the TfL API. So the red layer is first and there should be some opacity, so they should look more purple than blue really. Um, but what you might be able to see is that there's the red points, which should look very much like I mean, which is exactly the same plot as this one, right with all the black points. So this is the 50 stops returned by the TfL API. And then over top of those are the blue stations, which are the ones returned from OpenStreetMap from the whole constraint fairness

Sam  59:05  
Put your response in the chat box if you want to. I can read it out if that's easier. 

Reka Solymosi  59:15  
Yeah. So Fiona said, are they not mapped in OSM? And you Yeah. So that basically, that is probably an explanation or either they might be mapped, but they might not be labelled or tagged with station or public transport key value pair, so probably transfer station key value pair, or they might not be tagged with Northern line, or great. So that's the sort of thing around crowdsource data. It might have lots of all the bits. I think it ended up reading in for me in the end. Let's try it again. But if If this works, we'll see something like 130 variables that people have logged like does it have a toilet? Does it have, I don't know, a bench, like everything you could possibly think of. But then maybe some basic things like what line does it serve? People might just miss or not recorded. So it might be that Yeah, they're not there or that they're there but not tagged with what we are. Maybe instead of station, it's stop, or tube stop or something like that, right. So it could be something like that. And there's also a note is it to do with a variation, the box dimensions? The reason that I don't think that would be the case, is because it's not like they're missing on the outside. So it's unlikely that I got a smaller box. And I don't think you can get a hollow or doughnut type box, although I don't know correct me if I'm wrong, if somebody knows that you can, but Yeah, if you can get sort of a box with holes in it, that might be an explanation. But I think if it was a difference in the box, and maybe it would be the outer ones that wouldn't. This is what you get for volunteer labour. But yeah, it could it could be typos. Like, it could be anything you don't know. We can't, it could manually go through all the stations. And there's a lot of Yeah, that's the sort of trade off right? You've got this like lots of local knowledge going into it. But then when you're looking for standardised, I want the stop number and the direction and the proper taggings. And that might not be a feature of the crowdsource data. Also, if anyone wants anything going over, I'm happy to do that too. I realise I kind of went through the end quickly cuz I didn't wanna spend too much time on our and mapping, because I know that's not what this is about. I just wanted to show the different ways in which it's really see if this worked it worked. And right, so you can see here this massive thing of all of the different types of things that people have tagged, tagged to the OSM version of the data with. So if we go back to subsetting, only the lines are only the points. True. Yeah, you can see 135 variables that people have typed this with. There's OpenStreetMap, ID, and the name and then all of these things that you know na for most Have them but then as you know somebody wants tagged one of the stations has air conditioning. And now that's a variable that exists. And if nothing else is ever tagged with it, that's why this probably 99% missing variables are missing values. But we can now know if people started to standardise Li tag everything with air conditioning, which they shouldn't have air conditioning. Do any London. Anyway, the back to this and let me get back to the chat. Bit of OpenStreetMap fantasy. Yes, please, if you could label lots of I mean, I'd be happy to do this for Manchester as well. I'm quite interested in bus shelter infrastructure and crime and safety and how people how safe people feel at night waiting for the bus. So if I ever wanted to tag whether there's lighting benches, you know, secure like I don't know a shop nearby where there's, you know people to call for help. I support this. Nice. Any other questions?

Sam  1:04:46  
If anyone has any questions for you to do feel free to unmute yourself as well or any comments 

Reka Solymosi  1:04:53  
Or any of the people who are the API veterans who have pointers that I Missed and so as I said, Sam Langton who's also on the call somewhere and I have a book chapter which it's more about open data and using open data and then API's using API's to call it as a practical example of that and but we're it's under review currently so we're not allowed to post it anywhere and not even preprint yet we've been told but we can I think privately share maybe some cut that out of the recording

Unknown Speaker  1:05:35  
Yeah, what's time is it? I'll make sure to scramble the audio. 

Unknown Speaker  1:05:41  
Yeah, whatever, publisher Sage or something. must never hear. But yes, we're very happy to share that it goes through all of this with a lot more detail. And that's why I'm also this these notes that I shared around build, stay online. So if you're following along and you've got a question, feel free to contact me I have on the bottom here. Yep. So just get in touch either Twitter or email or any such form. And I'm happy to go through it and answer questions.

Transcribed by https://otter.ai
