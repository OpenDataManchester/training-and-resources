Rachael  
So, thank you so much for having me. And it's nice to see some familiar faces as well as new faces. I'm just going to pop a link to the GitHub repository that I've used to basically build this presentation. And if you do have questions that come up while I'm talking about something, if it is related to what I'm talking about and could benefit being answered in that moment, do pop it in the chat. I'll try my best to keep an eye on the chat. But otherwise, I think Sam will unmute and ask it But otherwise, if you can wait till the end, and that's great. And I'm going to go ahead and share my screen.

Rachael  
And I'm just gonna adjust my settings here a little bit so I can see some faces and see the chat box so apologies while I get this sorted. Okay. Excellent.

Rachael  
Right, hello. So my name is Rachel. And today I'm going to be giving a friendly introduction to GitHub. Thank you so much to open data, Manchester for having me. Big fan love coming to your events and everything that you do. I'm also a big advocate of open everything, open data, open source, open research. And so I also really like giving this talk. So when I saw that they were looking for somebody to do it, I sort of volunteered myself. But the reason I like to give this talk is because when I first got started with GitHub, many moons ago, I was super overwhelmed. It's really scary. It's really hard to get started. A big reason for this is the language and the terminology. It just is. It's difficult to know where to start. And there's lots of documentation out there. There's lots of tutorials, but finding one that works best for you, that meets you where you are at your level can be really difficult. So hopefully a friendly Face who's been in your situation before, we'll help you out a little bit. So I'm going to introduce myself in a second. And then I'm going to briefly introduce version control, get and GitHub, because all version control and get our you need to know the basics. We're going to be talking about GitHub. I'm going to show some examples of how GitHub is used. And we're going to do an interface tour and jargon busting, because the best way to learn is to basically just click around and see what's there. I'll then demonstrate how to contribute and work on one of your own projects on GitHub, as well as contributing to somebody else's project on GitHub. And then, finally, we'll talk about GitHub for collaboration and best practices, and then I've left some more resources for you to take away. So I'll briefly introduce myself. So my name is Rachel Ainsworth and I am the community manager for the software Sustainability Institute which is a consortium across the US K that promotes better research practice through better software practice. And my main responsibilities are to run their fellowship programme and organise their annual collaborations workshop. So I get to meet a lot of people doing really interesting work in various domains. And it's Yeah, I really love what I do, I get to promote this open. All things open really, um, I previously was a researcher in astrophysics. So that's where I really started using GitHub was sharing work and software that I created as part of my research. And I also do a few other things, but where I really learned how to use GitHub and where I was taught it in a way that was really meaningful for me was through the Mozilla open leadership programme. So I been inspired by that a lot and I've taken a lot of their documentation and tutorials for this today. You can find me in various places on the internet. I also organise the women at data Meetup group here in Manchester called her plus data Manchester. And it's nice to see some familiar her plus data folk here. Thanks so much for coming. But basically, we are a community working to connect, inspire, support and empower the Northwest UK is with an a data. Of course, now that we've all gone online, we welcome people from all over the world. So we have our next event, actually, next week, next Thursday. But if you want to learn more about her plus data, there's some links down here as well. And we're always interested in collaborating on events. So if you also have an idea for an event or a topic that you want covered or talks you want to hear about, we'd love to hear that as well. So, time to go ahead and dive in. Like I said, Before, we can really jump into using GitHub, we do need to talk a bit about version control and get let me just increase this a bit so that you can see it a little bit better.

Rachael  
So version control. It is quite like it sounds. It is a way of tracking changes to a document or a collection of documents. So you may have used a type of version control before such as your Microsoft Word or Google Docs, there's usually a history or a changes or revisions feature. So that is a type of version control. And it's really useful when we work on our own projects. But it's even more important when you are working on projects and are collaborating with other people. You might be working on a team that spread around the world, you might be working in the same room, although probably not these days, thanks to Coronavirus. You might be working simultaneously or asynchronously. But no matter how your team is organised, it can be challenging to kind of wrangle all of all of those changes that you're making into a single project. And so version control really helps us to manage this process process. It allows us to store a history of changes made and who made them and it allows you to revert or go back to Earth. versions of those documents and understand how the different contributions made by different people have changed the project over time. So let's take a step back first. So when we code or three write text, or if we create content of any kind using a computer, we usually end up with a collection of files in a folder, or a directory known as a repository. And so basically, it's just if you think about your file system on your computer, if you open up that Documents folder that could technically be a repository. It's just a place where you store documents related to a project. in GitHub lingo, it's referred to as repo. So I'll probably be saying that quite a bit throughout the night. But when I say repo, I mean a repository, this collection of files or documents in a folder. And even if you're working independently, you're probably going to make a lot of changes to your content or your code as you go. So for example, you might change some wording in a text file, you might add a feature to your code. You might not touch other documents related to the project. But as you go along, you might make mistakes. Or you might experiment with new ideas. So in this image, we have this folder added to the repository, we have this file edited. And then in this file, our Fox has removed some text and has added some other text. And so as you make changes, I don't know how common This is for you. But I know some people make multiple copies of the same file in order to preserve a version that's working while you do experiment. So I tried to improve it or add functionality, but keeping track of all of these different files can become difficult and a bit of a nuisance. So if you work with others on documents, maybe you're emailing them back and forth, and then you come up with this sort of ridiculous convention where you're you know, renaming it to these really long things. I know I've done this, you know, version two, final use this And so on. And so this can really cause issues, especially when you're going back to try and actually find the document that you need, or that you are the application that you want to deploy. And so this is what we want to avoid. And this is where version control can really help us. So what version control systems do is they start with a base version of the documents, and then record the changes made each step of the way. So it's a lot like a time machine and a lot like the Time Machine application on the Mac. But it can take you back to the moment where your document was created, or to any other point in time where you are a collaborator has saved changes to that document. So with version version control, you don't save multiple copies of the same document. You just save the timeline of the changes of that document. So here we have our base document, where we've added you know, maybe some text, maybe a chapter to our thesis. Now we've gone back the next day and we've decided we want to delete a whole section and we go back again and the next time you save it We save it because we've made some edits, and so on. And so a version control allows us to do is it allows us to go to each point in time along this timeline. So instead of having six separate files, we just have one file, which has its history saved as versions.

Rachael  
So what's exactly on this timeline, we'll keep that showing actually. So each record of these changes is called a commit. So every time we save our document, we are committing it. And that's just version control terminology. And when we commit, it stores information on what changes were made, when and by whom. So it offers a timestamp, it offers authorship, and it documents what the differences are between the different versions. So the timeline of the document is therefore a series of commits and best practice is that each commit should have an associated message alongside it which has a brief description of what the change word that you made and why you made them. And this is really important for your future self. You know, if you go back and you look at your Why did I make that change? It's basically telling your future self, why you did something. And it's also really helpful if you're working with collaborators and telling them why you made a change. So in this example, the Fox has made some edits. It's added some text here and or added some code here and remove some code here. And so our commit encodes the author, so the fox and then the Fox has added this commit message. So saying exactly what they did. And when we work, when we share and work on projects with collaborators, collab words, when we share and work on projects with collaborators, managing the changes or the commits that multiple people working in multiple different places make at different times, to a set of documents, it can become very, very important to really manage those changes and keep track of them And when we're working with multiple people, everybody needs to know and understand what commits are being incorporated into the repository and why. So then communication becomes very, very important. But lucky for us, there's a piece of software that will do this for us, it will help us manage and communicate with our collaborators about commits to our project, and it is called get. So I'm not going to spend too much time on get because that would be a whole session in itself. But basically get is an open source distributed version control system for tracking changes in text files. And if that seems like a mouthful, let's just break it down a little bit. The most important part is that it's the version control system that we're going to use to track changes in our documents. It's open source, which means it's maintained by a community. And you can you can actually see the source code that powers it. And it was originally developed by the author of the living the Linux operating system and it is Command Line software, which works on your local computer. And this is what it looks like to a user. Why is it called get? That's a great question. I probably should have looked that up, but I didn't. And, and yes, I did write my presentation in markdown. I'm getting distracted now. But this is what it looks like to a user. So if you type get hyphen, hyphen, help, in a bash shell, this is what happens. You see this pretty monstrous usage, although the only real important bits are get and then the command and then you can have some arguments to go along with it. And then these are all of the different arguments that you are, these are sorry, these aren't all of them. These are common get commands used in various situations. So you can see things like clone and knit, maybe some more intuitive ones, like add or move. And then you see some of these other ones like branch commit, we recognise but merge rebase fetch pull, push the There's a lot going on. And this can be where it gets kind of scary, especially if you're a beginner. So usually when you get started, it's really helpful to have a cheat sheet because you'll, you'll generally use the same small set of commands over and over again throughout your workflow. But it's probably easier to get started with these concepts through our web interface, instead of the command line, where it might look a bit more abstract. So there are many offerings of get repositories as a service. Some other ones besides GitHub or Bitbucket and get lab and get lab is open source as well. But we are going to focus on GitHub today, because that's what was asked. And because it is the most widely widely used, I think when I checked Wikipedia, I think there were something like 31 million users, but it's a lot and that's where most people are. So it's important to also meet your contributors where they are, but also look up the best service for for you and what what you believe and what you prefer. Let me just ask if there's any questions.

Rachael  
Right. So, um, GitHub is a platform for hosting and collaborating on get repositories. So it adds a web based social and user interface to version control. It provides the structure and space for communicating about collaborative work on open projects, although you can have private repositories too. So you know, some initial setup, and by establish establishing a good workflow, you can make your projects accessible and transparent. And you can also create a really respectful and productive working environment for your collaborators and teammates. And the GitHub is based around a basic workflow called the GitHub flow, which is built around core get commands. And I'm going to just walk us through those commands here now and so it's, it basically revolves around what's called branching. So what happens is you have your project repository And it's made up of a set of branches. And we're going to cover these a little bit more once we are going around the repository, and I can show you what they are. But the master branch is basically the default branch or that base version of our repository. And I'll also come back and talk about how this kind of terminology can be problematic. But for now, it's the terminology that GitHub uses. So we have our master branch, which is the base version of our repository. Say we're developing an application, we've got some code, we've got some scripts, but maybe we want to add a feature to our application. But we're not quite sure if it's going to work or not. We want to experiment so what we do is we create a branch, which copies the contents of our original repo, our master branch, and we name it feature. And we can work on this branch separate to our original repository where we can make changes we can experiment we can ask stuff, we can remove stuff, we can commit these changes. And then once we test it, and we see that everything's working, how we want it, and we're happy with it, the next stage is to open or submit a pull request. And what this means is we are requesting that the changes that we have committed, get pulled into the master branch into the main base repository. And so what happens is that signals for somebody else on your team to come take a look at it, people can have a discussion around the changes that you made, you might, you know, make more changes based on this discussion, you might, you know, add stuff take stuff away. But basically, this is where collaboration comes in. And then once the whole team is happy with, with the feature that you've added, you then can merge it back into the main repository branch. And so that's sort of the basic GitHub workflow. But as we've talked about, one of the main barriers to getting started with this is the language there's a lot going on commit pull request, merge, branch Master, it can be a lot, but the best way to learn is to just practice with it, play around with it, etc. So, just to summarise before we move on, version control is like a limited Undo button or a time machine, it is very difficult to lose or break something. Because you can always revert back to your previous version, you have to really go out of your way to do to lose information on GitHub or in a in a get repository. version control allows many people to work together in parallel. Get is a command line version control software that tracks all changes to a repository, and the repository is a collection of documents. revisions or save changes to documents in a repository are called commits, and GitHub as a service. As that hosts your get repositories online and helps you work with contributors, it adds that really nice web based social and user interface to version control. And then I've just added some attribution out here from where a lot of this content is from. So we have a question on so do we do do two files in the end, one master and one feature, and technically, you'll have so each branch will be a copy of the repository. So you and this is where it gets confusing, and this is why it's difficult to get started.

Rachael  
You, you will have to separate files while you experiment. But then once you merge the changes in it will all squish it back into one file. Yep, I think somebody answered that as well. Thank you, Ricky. And I think that's it for now. Okay. So Some examples of how GitHub is used. So GitHub is used for collaboration for code sharing and documentation. I like to use it as an online portfolio of your work, it's really good to share with employers, you can use it to share educational resources and even datasets, there is a size limit on the datasets. So the data tends to be quite small on GitHub. But it facilitates open source. It's really good for project management. And they've implemented a lot of features recently, which which really helped facilitate that. And I'll show that in a little bit later. It's effectively a social networking site. For programmers. Version Control is the main use, but you can also use it to build websites and write papers. And that's not an exhaustive list. So I have some example repos here are repositories, that you can either look at your free time, but I'll probably show a few. So I'll be coming. to mine and in the next bit, so I'll hold off on that. But we have the Open Data Manchester organisation GitHub account. And this is where you can see all of the repos that open data Manchester owns. So for example, the training and resources repo contains all of the pick and mix resources back and our ladies have a really great organisation repository. And a collaborative projects that I've been very lucky to be a part of is the turret way. And so this is not strictly code related. This is a collaborative project to write a handbook on how to do reproducible research and data science. And so there's a whole community built around, effectively this GitHub repository, and we have lots of contributors from all over the world who who contribute to this really nice resource. A software example is pooch which is something that an SSI fellow software Sustainability Institute fellow has developed. And it's, I think it's a Python library to fetch your data files. So it's got all of the code here. It's got a paper related to it, Scott example data, but it's got a really nice README that points you to all the places you might want to go to learn more about this software package. And then some fun examples. You can find the original Apollo 11 Guidance Computer source code, which sent people to the moon. And then I really like this example, the Jet Propulsion Laboratory have opened sourced some material for a rover so you can build your own Mars rover to have so get help can be used for a lot of different things. But next is probably the most useful bits. We're going to have a tour around the internet face. So I'm going to be leaving this page. But if you need to come back to it, I've got all of the steps that we're going to cover here. But we're going to start on the homepage. And this will look different if you're not logged in, but if you are logged in, this is your dashboard. And it might be a bit confusing until you until we go through the rest of get how then we start learning more about pull requests and issues and whatnot. But generally speaking, on your dashboard, you can see your recent repositories or your recent projects over here and any teams you're affiliated with. You can see your recent activity. So you can see that I've been working on this introduction to GitHub, you can see other projects that I'm working on. And then you can see activity from people that you follow. So I see dispose of Thomas here, he started following me Hello, as well as other people I follow and then over here on the right so you can explore And featured repositories.

Rachael  
But we're going to go to my profile. So up in the right hand corner, you can click your little avatar, and go to your profile. And so this is what a GitHub user profile looks like. And it shows a user's activity on GitHub. So it includes all of the basic profile information, such as your name, a little blurb, about you, you know, follower information, any organisations that you're a part of. And here on the main Overview tab, you can pin repositories that you work on. So for example, I've highlighted my personal website, my CV, and then some other projects that I've worked on. And then down here, you can see your contributions. And I think this is both one of the best and worst things about GitHub because if it's bright green all over the place, it makes you feel really good, but if it's not, you kind of feel it out about it. Um, but I just kind of want to highlight something that I think It was really funny. So I opened my GitHub account in 2015. But it just sorry. But it just scared me a lot. And I got overwhelmed. I didn't know what was going on or what I was looking at. And it took me two years before I started using it. So I'm not saying that you'll it'll be two years from now before you start using it. But it was two years before I got a tutorial like this, where I was finally able to learn how to use it properly. And then since then my activities gone up. And I use it for all sorts of things. So what's next, we can click the repositories tab to see a list of all of the users repositories, you can easily search for one using this search bar right here. The projects and packages tabs are a bit beyond the scope of this session. But you can learn more just by clicking the button There. So we're going to go back to the repositories tab, we're going to go back into my introduction to GitHub, which is where we started. And we're going to basically work our way around a GitHub repository now. So a GitHub repository, also known as a repo is the most basic element in GitHub. And it's really easy to imagine it as a projects folder. So it contains all of the projects, files, including any documentation, and it stores each files revision history, so that commit history. And you can have multiple collaborators and repositories can be either public or private. So at the very top, you'll see the username and the repository name. And you will see underneath over here you have an A, this is normally a watch button. So because it's my repository, I'm already watching it which I receive notifications of any sort of interaction on it. But if it was somebody else's repository, I could click this to watch any activity on that repository. A star is like a like. So you can start to either bookmark it or show appreciation. And then when you fork a repository, that means making a copy of that repository of that repository into your account. So if this is somebody else's user, or if this was some other users repository, I could click fork, and it would make a copy of that repository and put it in my GitHub account, and then I can play around with it. And we'll talk a bit more about that in a later section. 

Rachael  
So then, next, we have this this series of tabs. So the main tab, the one that is default viewed is the code tab. This is where you can see the file system associated with the project. You can see information about the project. So here's you know, a description, I've linked to the website associated with it, I've tagged some key terms, you can see the licence information, and then any other information that you can enable as you go throughout. So if you have releases for your software, or if you're, if you've got packages, it'll also display user and contributor information if you have other people contributing to the repository, but the next thing that renders is the readme. And this is pretty much the welcome mat to your repository. This is the first thing other people will see. So it's a really good place to include some basic information to capture people's attention. So here I've just added, you know, a summary of the session of what the contents are. So here we are open data, Manchester's pick and mix. Here's a summary of what we're talking about an outline, and then the licence information. So So we can click around, here are the files associated with it. Maybe if we click into example files, I've got a few here. So the most common type of file or the one that renders automatically in GitHub is called a markdown file. And markdown is just a lightweight and really easy to use syntax for styling all forms of writing on GitHub. And it's also used if you code in R as well. And the reason the reason I'm using it is because it automatically renders here on GitHub. And so you can do things like add headers, you can I tell a size or bolt texts, you can add links. You can have unordered lists and ordered lists. My favourite are checkboxes, I find those really satisfying. And then of course, because it's a software, software repository website, you can also render code in code blocks. So I guess if we just look at the RAW file real quick, you can see what markdown looks like, potentially. So it's just really simple formatting. It's usually made up of hashes, and an Asterix and dashes. And that's basically how you get most of your syntax. But there are a lot of cheat sheets online that can help you get used to that. So we'll go back to the main code tab of our repository. And above our file system, we have a few buttons here. So branch, this is what I was talking about at the end of our introduction, and this is where GitHub is really powerful. So let's say I want to add a file or a script here, but I don't want to break anything or it's really experimental, or from working with others. I just want to respect to the repository and not just go about making my changes without other people taking Look, I can create a branch. So if I type a name of a branch here, I'm just going to type example. An example branch already exists, because I've created it for this demonstration. But let's say I wanted to create a new branch for I could test stuff out. I could say, example, French, too, although it's really good practice if you add your user name to that so that people know whose branch that is. And that's one thing you can do with that. And remember, that's to just test stuff out and not touch the main repository. While I'm here, I will say that I have switched my default branch to main, because master has references to slavery. So GitHub will be changing this in the future. I'm not sure how long that will take to change that site wide. But you can change your defaults. branches well, so I've changed it to mean here. Some of these other buttons are go to file. And that just allows you to more easily search for files within your repository. You can add files to your repository, you can either create a new file, which opens up a text box, or a text editor, or you can upload files that already exists locally on your computer. And then the clone button allows you to download that repository. So you can clone it to your local computer, which means that you have a copy of that repository on your local machine. You can open it in desktop, which is a GUI for GitHub, an app that you can download with a really friendly interface, or you can download as a file with all of the contents of the repository.

Rachael  
Do I have any questions yet? 

Rachael  
So that's The main code tab. So then the next tab that we have is the issues tab. And I like to think of the issues tab as a big to do list. So this is where you can say what you want to do for your project. It's where users have, for example, a piece of software can come and report a bug where users can request any feature. It can be used for all sorts of things. So here, what I've done is when I started this repository, I added the description of tonight's session along with some guidance from Sam to help me sort of structure this presentation. And then I wrote myself a bunch of to do's in order to create this. So for example, I wanted to create a readme for the repository. I wanted to add a licence. I wanted to write that About Me page and pretty much every step of the way. I said I need to do this. And the issues kept track of each of those tasks. So here's an example issue. And so issues are suggested improvements, tasks or questions related to the repository. So they can be created by everybody or they can be created by anybody. If you have a public repository, or they're by, they can be created by anybody who is a collaborator on the repository or repository. And then issues contain their own discussion threads. So it's where it's where that social aspect comes in. Because you can see the discussion happening here people can comment on the issue is where you can go back and forth with your teammates or your collaborators and discuss what needs to be done or add more information. You can categorise the issues with labels. So I've added a good first issue and that usually signals to somebody that it's usually an easy, usually an easy issue to tackle. But for instance, if somebody was reporting a bug, they could label it as a bug. If documentation is be created, You could do that. There's a few default options here. But you can also create your own labels as well. Depending on your project, it's really good practice to add, you know, a descriptive title and description to tell the repository owner exactly what the issue is. And, and then usually the repository owner will add an assignee and that that will be the person who will take care of that issue or who's responsible for carrying it out. And, yeah, and you can, you can write it in markdown, so you can implement all sorts of things. And then it's a really good place for discussion. And you can also link it to pull requests, but we'll get to that in a minute because that's probably a bit much and you can look into projects, which we'll also talk about in a minute. So that is the issues tab. Just think about it as a giant to do list. The next is the pull request tab. This is where you really keep track of the changes being made to the repository, especially, especially if you have multiple people contributing to the same repository. So go ahead and open up this example for request. And it looks very similar to the issues page. So you have, you know, a title should be descriptive. Both issues and pull requests have these numbers, these IDs associated with them. And they're usually created in the order that you make them. So for example, if you make an issue, the first issue you make will be number one, and so on. And so there's a bit of information here. So I'm the person who is making a pull request and I want to merge two commits. So I made I saved two changes two times. And I would like them to come from my example branch and go into Maine. And that's sort of where you need to start paying attention to the terminology and two arrows involved into which direction things are moving in the branch structure. So here in the conversation tab, I've opened a pull request.

Rachael  
It's where you propose changes to a repository. And it can either be accepted or rejected, it doesn't have to be pulled in by the repositories owner. But like issues, pull requests also have their own discussion forum. And it's really good practice to provide as much information and a reason why you're submitting that pull request as well to really help the repository owner or to help you if you're working on a project independently. And it's also written in markdown you can tag issues using a hashtag. And then this is where you have a discussion and what the pull requests lists here in the conversation tab is it lists the the commits that were made, so when I submitted the pull request, the change that I made To the repositories that I created, and added text to an example markdown file. And so the repository owner, which in this case is also me came in and I thank myself for my contribution, and basically alerted to them that I'd get back to them as soon as possible. And then once I've gone and reviewed the pull request, or if it's my own project, I've gone in and made sure all of the changes work how I imagined they do. You can make more changes, you can have more discussion. It's, it's, you know, this really given take cycle, it doesn't have to, you know, just go one way you can always go back and make more changes, have more discussion, everything gets saved. So every time another change is made, it gets committed, and it gets it gets gets listed here in the pull request. And it can go on like this. And so at the bottom, if everything's green, that's usually a good sign and it means that it doesn't break anything or it doesn't conflict with anything. In the written the main base version of the repository, and that means it's okay to merge those changes in with the base branch of the repository. And on the side, we can have those familiar things like we saw in the issues we can have, we can assign a reviewer so that somebody who might have the expertise to deal with those changes. Maybe somebody in particular on the team can review a piece of code. So usually request them to take a look at it. Otherwise, you can assign somebody else to go through the pull requests and check everything. You can label it, you can add it to projects, you can link it to issues, and so on. But if we click the commits tab, you can see all of the changes that are being proposed in that pull request. So so these are this is the commit history. This is that timeline that we were talking about. Each commit has its own Unique Identifier, but let's just go ahead and click on one. So this is the file that I propose. It's just an example dot markdown file. So it's that that GitHub friendly syntax where they just have example text everywhere. And in the conversation, I basically said to myself, you know, okay, could you maybe add a list, could you bold some text. And so you can go in and you can make more changes, you can add things. And what these different colours mean, is that red means that something has been removed, and green means that something has been added. So it's a really easy way to view the changes that have been made to the files in the repository that you're requesting to be merged into the main into the original repository. So that's how you can view what's been changed. I'm not going to go too much into this checks tab. It's also beyond the scope, but this is Where you can apply things like continuous integration, you can set up some automatic checks to make sure that the pull request doesn't break anything or that it automatically deploys the website or such and such. And then here the files changed is, again, it's showing those deaths, which are the differences in the, in the files between the branches. So I know that can be kind of confusing. So in the pull request tab, we have the proposed changes being made. The commits are just a simple list of what changes were made, and by who or whom, and then the files changes where you can view the diff the files that are different to the base repository. So what new changes you're going to be pulling back in to the master or the main repository. And so that's a quick breakdown of pull requests. You can cover it in thing there.

Rachael  
And next is actions. And this is a relatively new feature and one that's also beyond the scope of this session. But I'm really excited to actually learn more about these because it helps to automate your GitHub workflow. So if you want to learn more about that they've got some information listed there. But I also mentioned that GitHub can be used for project management. And they've added this Projects tab, where you can set up a project board for your repository. So for example, when I was when I was creating this session, I basically created a Kanban board with to do in progress and done and it allowed me to create cards based on all of the issues that I created. So my to do list, I was able to move my tasks across like like, like Agile Project Management. So I've created an example project here just to show somebody The different ways you can use it and you can set up your cards however you want. GitHub has some default templates and can run as one of them. So you can have use an example tasks here, you can create cards, you know, out of notes, you know, another example, task. It's as easy as that. It's really handy because you can also convert those into issues. But that might be a bit complicated for right now. So we'll move on, but you can add, you're in progress, and you're done tasks. So it's really useful for project management, you can see where the bottlenecks are with your workflow. But if you're just getting started with GitHub, I might hold off on that. And that's a fun feature you can you can incorporate into your workflow a little bit later. And the wiki provides a place in your repository to lay out the roadmap of your project. So the current status, but it's used mainly used for providing documentation. So if your repository is providing code or application, this is a really great place to document that where people can find more information about it that might not be included in the readme. There's a Security tab, which you know, which lets you set up security features for your repository. The insights tab allows you to explore the activity within your repository. So you have an overview of the activity here such as you know, the pull requests that have been merging active issues, you can see I'm the only contributor here. But if you want to see if there are more contributors, there's a contributors tab, and so forth. And so you can explore that here in the insights tab. And then the final tab, which is just off screen is settings. And this does what it says on the tenant allows you to manage the settings of your repository, such as the name of your repository, you can upload a social media preview cards, you can enable all of the different features such as the wikis and issues Project boards. And most importantly, you can enable GitHub Pages which can turn your repository into a GitHub hosted website. So for example, I just, I think by default, it says none and it's disabled. It only allows you to deploy from a select few branches. So here, it has to be the master branch because I couldn't select my new default branch name that I created.

Rachael  
And then it will deploy it. And if you're deploying it for the first time, it might take a little while to set up. But basically, it takes the structure of your GitHub repository, and you can select a theme, and it renders it into a website. So here's that README. When you saw on my landing page, we can click the friendly introduction page. And it's just a really nice way of turning your repository or your project into a website and it's hosted by GitHub. It's completely free. for you. And I think that's mainly what I wanted to cover in the Settings tab, that's where you can delete it. And like I said, they make it really difficult for you to delete stuff and stuff. And then a bunch of other important settings are here in the left sidebar. But that is the sort of whirlwind GitHub tour. We've covered a lot. There's a lot of language, branch clone fork. My best advice to you is to just get in there and start having play with it really. If we go back to the GitHub tour, at the bottom of the page, I've also included a glossary with some of the icons associated with each of the terms. So you can always go there. I've also linked to the GitHub glossary where most of the definitions have come from, but that can be quite an overwhelming have documentation. So I've included the main ones that we've covered here. And, but I think it's always best and easiest to really understand these concepts if we just do them. So if you're able to follow along, you can otherwise I've linked the tutorial that I'll be going through here. So you can do it in your own time. But the first demonstration that we're going to do is the Hello worlds tutorial. And so what we're going to do is we're going to create a new user repository, we're going to start and manage a new branch, we're going to make changes to a file and push them to GitHub as commits. We're going to open and merge a pull request. So we're really gonna get hands on with that GitHub workflow. Let me just check if there's anything, any questions, real quick updates, okay. So I am now going to go back to file.

Rachael  
Okay, so the first thing we want to do is we want to create a new repository. So we come up here to the top bar, and we click the plus button, and we click new repository. And so this is what you see, GitHub has added this feature called repository template. So if there's already a template for a repository that exists, you can set it there. But that's a bit advanced for us right now. But this is where we can name our repository. So I'm just going to name it Hello worlds. It's telling me it's available. And then I can add a short description. So demonstration for creating a GitHub repository for Open Data Manchester you can set. Whether it's public or private, and private repositories are now free for everybody. So if you want to keep your repositories private while you get the hang of GitHub, that's an option as well. And, and then you can select initialise, this repository with a readme, and that'll just create that README file for you on its own, and then you can just populate it with the information that you want. I'm going to ignore these two buttons for the minutes, and we're going to create our auditory. And here we are, this is what this is what the repository looks like when you create it and initialise that README for you. The default branch is the master branch, and it's the only one that exists so far. But what we're going to do is we're going to create a new branch to make some changes to our README. So let's call it we need edits, and then I click Create branch README edits and what it does is it copies the repository from Master or the base branch into the readme edits branch. And so that's what you're seeing here. And so it's really important to always double check this branch icon here to see what branch you're working in because you don't want to commit to the wrong branch. So here we are reviewing our README and its branch. And it looks pretty much the same so far, because we haven't done anything. But now we're going to make some changes to it. So if we want to edit the readme, we can get there, click it here, or we can click this edit button here since the readme is what renders the front page of your repository, but just in case it was a different file, we'll go ahead and we'll open up the readme. This is what it looks like when you open up the file. And then over here, we're gonna click the pencil icon to edit this file. And then you can see some markdown has already been rendered here. So a single hash means that it's a header. And then here is our description that we added when we created the rest. repository. So I am going to copy and paste some pre made text. delete some of this, edit it a little bit how I want it so that it looks a bit more user friendly. And I'm just writing, I'm currently demonstrating how to create and use a repository in bold, start manage a new branch and make changes to a file and push them to GitHub as commits. And so once I've added all my changes, and I'm happy with them, I can scroll to the bottom here, and I can add a commit message. So before I save it, it's really important to add a meaningful commit. So GitHub usually puts a pretty good one here for you. It's usually it's usually pretty intuitive, but I'm just going to say, update me just enough to make sure that I added something. And then down here you can pay attention to which branches converting it to we're currently on the readme edits branch, or you can create a new branch and start again. But I'm just going to go ahead and commit changes to the readme edits branch. And now my edits have been saved. So once I preview this, and I'm happy with how it looks, here I am on the readme, edit, sprach, I can see my new README rendered down here. Now it's time to open a pull request where I requested the changes I've made get pulled back into our base branch. So GitHub has been adding features that make this really easy. So I've got this notification up here that I've had recent pushes, and I can easily click compare and pull request to view that. So what it does is it opens a pull request. This is the bit up here that you need to pay attention to to make sure Are you know where the changes are going? So this arrow is what you need to check. So the base branch is the master branch and we are asking that our changes from README edits get merged into the base branch. And I have a green tick here saying that it's able to merge, which means I'm not conflicting with anything in the base branch. So there should not be any problem pulling my changes in. So this is where you edit the pull request. You give it a meaningful title update README. So and then you write a nice message to the repository owner, such as this pull request, adds information about the demo and duration to the readme.

Rachael  
And then when you're done filling out your description, you click Create pull request. And that opens it. And when everything's green, that's really good sign, it means nothing's broken, it means none of the checks that you have set up are sending any alerts. There are no conflicts with the base branch. And so it should be okay to merge no problem. And so if somebody else owns the repository, they might come in and take a look and tell me that it can be merged or not. But since it's my repository, I'm going to go ahead and merge that pull request. This is where you can add a commit to the pull request. Or you can just go ahead, sorry, you can add a commit message to the pull request, or leave it as the default. And then when everything goes purple, that's mean, that means it's all merged and you can see the merge symbol here. And then if you want, you can delete that branch so that it's not clogging up your branches. Or you can restore it if maybe that wasn't something you wanted to do. And you can add labels and stuff like that. Angeliki is being amazing and adding some extra resources to the chat. 

Rachael  
Ah, revert button.Yes. Um, right. So that's, that's, that's as a few steps as it is. So that's basically the GitHub workflow. You make some changes, you open a pull request, you can have a discussion based on those changes in the pull request, and then merge them and once you're happy with that, so what if you want to contribute to somebody else's project? And I realise I'm going a bit long. How much time do I have Sam?

Sam  
Well, I don't know. I mean, you know, we're here to eight basically. So I think you know, if you want to leave a bit of time for q&a, maybe 10 minutes q&a at the end, so yeah, you know.

Rachael  
 Perfect, thank you. So then we go back to my repositories. And then you can see that the HelloWorld one is now my list of repositories. So I will quickly demonstrate how to contribute to somebody else's. So I'm going to contribute to open data, Manchester's training and resources repository. So there's open data Manchester organisation, I'm going into the training resources, and I can go ahead and add my resources to the pick and mix. So it's really good to sort of explore the project and repository. Here's a previous one, I can see that the convention is, you know, to describe what is going to be listed and then list the links down here. And you don't want to just go like start making changes to something that isn't within the convention of the project. Usually they're contributing guidelines that you can follow that the project owners have made available. And that's usually a good place to start. But because I don't have right access to the repository, what I need to do is I need to fork the repository. So I click the fork button, I want to copy it to my GitHub account. So this is showing that it's making a copy to my account. So now we're in my GitHub account, I have a copy of the training and resources repository, I'm going to pick and mix and I want to add a file. And because I'm going to create a new file, it's going to open up a text editor. And based on the convention that I saw in the other folders, I'm going to do intro to GitHub, which is the name of my session, I can add a backslash to create a folder. And the other files that were in those other folders were lowercase readme.md. And so I've already written what I was going to add. So for brevity, I'll just copy and paste that in. And so this is done in markdown. So this is how you make a link. You have square brackets around the text, and then curly brackets around the link that is pointing to, you can click Preview to see what it will look like, that looks great to me. I'm going to say, hey, Sam, I have added the GitHub resources to pick and mix. And then, because I'm in my account, for now, I'm just going to commit it to the master branch, but I could create a new branch if I wanted to. But the important bit is that I wanted to go back to the Open Data Manchester account. So now I can go back to The main bits of my repository, I am, this branch is one commit ahead of the Open Data Manchester repository. So I'm going to click Next to it and open a pull request. So I'm asking, I'm requesting that open data, Manchester, pull my changes from my copy of the repository into their base branch. And you can see that the only file that was changed is that I added this README on for the intro to GitHub session. So I want to create an open a pull request, I need to give it a meaningful title. So add the intro to GitHub resources to pick and mix. 

Rachael  
Hi Sam, here are my resources. And because we're running out of time, I'll just leave it there but this is where you leave a meaningful description. of what you're doing. And then you hit Create pull request. And there you go, I've submitted it to open it in Manchester. And if they want, they can incorporate it if they don't want, they don't have to, or they can comment on my changes. And that's basically how you contribute to somebody else's project via GitHub. I've added another one down here, I knew I wasn't gonna have time to go through it. But if you want to create your own web page based on somebody else's theme that they've created, this is a really great way of practising forking repositories and making edits. And unfortunately, amount of time for the last thing. But I've included a lot of information on GitHub for collaboration and best practices. So there are basically two models for collaborating on GitHub. There's that fork and pull model that I just demonstrated where you copy somebody else's repository, make contributions, and then submit a pull request back to them. And that's if you're not an owner of the repository, or, or you can have the shared repository model where you actually Add collaborators to the repository. So the repository has several different owners and they would have readwrite access to that project. And so I've left some links on how to do that. A lot of the collaboration comes through discussions on issues and pull requests, which we've already covered. And then there's a community profile checklists that GitHub has provided for you. And that is in the insights tab. If you go to community, they've got this checklist of things that will make your project really welcoming and inclusive to contributors. So you could add a code of conduct, you can add contributing guidelines, out a licence, and so on. And so that's really useful if you've got an open source project where you're looking to attract contributors, and I've listed lots of links to help you get started there. And then more information on how to use project boards and wikis. And then just and the last thing I've added is just all have the resources that I found really useful. A lot of the inspiration for what I've included in this talk to help you are get on your way with using GitHub. So sorry I've gone over time. And thank you so much. I'll take any questions.

Transcribed by https://otter.ai
